pipeline {
    agent {
        docker {
            image 'maven:3.8.4-openjdk-8-slim'
            args '-v $HOME/.m2:/root/.m2'
        }
    }
    stages {
        stage('build') {
            when {
                changeset "**/worker/**"
            }
            steps {
                echo 'Compiling worker app'
                dir('worker'){
                    sh 'mvn compile'
                }
            }
        }
        stage('test') {
            when {
                changeset "**/worker/**"
            }
            steps {
                echo 'Running unit tests on worker app'
                dir('worker'){
                    sh 'mvn clean test'
                }
            }
        }
        stage('package') {
            when {
                branch 'main'
                changeset "**/worker/**"
            }
            steps {
                echo 'Packaging worker app'
                dir('worker'){
                    sh 'mvn package -DskipTests'
                    archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true, onlyIfSuccessful: true
                }
            }
        }

        stage('docker-check') {
            steps {
                echo 'check docker config'
                    sh 'docker -v'
                    sh 'docker info'
            }
        }

        stage('docker-package') {
            when {
                branch 'main'
                changeset "**/worker/**"
            }
            steps {
                echo 'Packaging worker app in docker'
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
                        def customImage = docker.build("fredflev/worker:v${env.BUILD_ID}", "./worker")
                        customImage.push()
                        customImage.push("${env.BRANCH_NAME}")
                        customImage.push("latest")
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'End of the worker App pipeline'
        }
        failure {
            slackSend (color: "danger", message: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
        success {
            slackSend (color: "good", message: "Build Succeeded - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
    }
}
